// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: protob.proto

package protob

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Match type between input name-string and the canonical form of a name-string
// in a DataSource.
type MatchType int32

const (
	// No match, verification failed.
	MatchType_NO_MATCH MatchType = 0
	// EXACT means either canonical form, or the whole name-string matched
	// perfectlly.
	MatchType_EXACT MatchType = 1
	// The match was incomplete due to similarity of name-strings,
	// OCR or typing errors. Take these results with more suspition than
	// EXACT matches. Fuzzy match is never done on uninomials due to the
	// high rate of false positives.
	MatchType_FUZZY MatchType = 2
	// GNames failed to match full name string. Now the match happened by
	// removing either middle species epithets, or by choppping the 'tail' words
	// of the input name-string canonical form.
	MatchType_PARTIAL_EXACT MatchType = 3
	// Same as PARTIAL_EXACT, but also the match was not exact. We never do
	// fuzzy matches for uninomials, due to high rate of false positives.
	MatchType_PARTIAL_FUZZY MatchType = 4
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0: "NO_MATCH",
		1: "EXACT",
		2: "FUZZY",
		3: "PARTIAL_EXACT",
		4: "PARTIAL_FUZZY",
	}
	MatchType_value = map[string]int32{
		"NO_MATCH":      0,
		"EXACT":         1,
		"FUZZY":         2,
		"PARTIAL_EXACT": 3,
		"PARTIAL_FUZZY": 4,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_protob_proto_enumTypes[0].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_protob_proto_enumTypes[0]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{0}
}

// Tells if matched result was returned by at least one DataSource in the
// following categories.
type CurationLevel int32

const (
	// All DataSources where the name-string was matched are not curated
	// sufficiently.
	CurationLevel_NOT_CURATED CurationLevel = 0
	// At least one DataSource is marked as sufficiently curated. It does not
	// mean that the particular match was manually checked though.
	CurationLevel_CURATED CurationLevel = 1
	// At least one of the returned DataSources invested significantly in
	// curating their data by scripts.
	CurationLevel_AUTO_CURATED CurationLevel = 2
)

// Enum value maps for CurationLevel.
var (
	CurationLevel_name = map[int32]string{
		0: "NOT_CURATED",
		1: "CURATED",
		2: "AUTO_CURATED",
	}
	CurationLevel_value = map[string]int32{
		"NOT_CURATED":  0,
		"CURATED":      1,
		"AUTO_CURATED": 2,
	}
)

func (x CurationLevel) Enum() *CurationLevel {
	p := new(CurationLevel)
	*p = x
	return p
}

func (x CurationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_protob_proto_enumTypes[1].Descriptor()
}

func (CurationLevel) Type() protoreflect.EnumType {
	return &file_protob_proto_enumTypes[1]
}

func (x CurationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurationLevel.Descriptor instead.
func (CurationLevel) EnumDescriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{1}
}

// Explains which ID out of returned should be used for substitution in the
// placeholder of the URL template.
type UrlTemplateId int32

const (
	// None of the IDs can be used for creating outlinks.
	UrlTemplateId_NONE UrlTemplateId = 0
	// Indicates that "id" is always good for creating outlinks.
	UrlTemplateId_ID UrlTemplateId = 1
	// "global_id" can always be used for creating outlinks.
	UrlTemplateId_GLOBAL_ID UrlTemplateId = 2
	// "local_id" can always be used for creating outlinks.
	UrlTemplateId_LOCAL_ID UrlTemplateId = 3
)

// Enum value maps for UrlTemplateId.
var (
	UrlTemplateId_name = map[int32]string{
		0: "NONE",
		1: "ID",
		2: "GLOBAL_ID",
		3: "LOCAL_ID",
	}
	UrlTemplateId_value = map[string]int32{
		"NONE":      0,
		"ID":        1,
		"GLOBAL_ID": 2,
		"LOCAL_ID":  3,
	}
)

func (x UrlTemplateId) Enum() *UrlTemplateId {
	p := new(UrlTemplateId)
	*p = x
	return p
}

func (x UrlTemplateId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UrlTemplateId) Descriptor() protoreflect.EnumDescriptor {
	return file_protob_proto_enumTypes[2].Descriptor()
}

func (UrlTemplateId) Type() protoreflect.EnumType {
	return &file_protob_proto_enumTypes[2]
}

func (x UrlTemplateId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UrlTemplateId.Descriptor instead.
func (UrlTemplateId) EnumDescriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{2}
}

// An "empty" message for gRPC methods that do not need any reasonable input.
type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_protob_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{0}
}

// Output for the Ping method, it returns "Pong" if connection to the service
// worked.
type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A simple value ("Pong" with all probability) to return if Ping method
	// succeded.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_protob_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{1}
}

func (x *Pong) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Output for GetVersion method.
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of gnames project.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Timestamp of when gnames service was compiled.
	Build string `protobuf:"bytes,2,opt,name=build,proto3" json:"build,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_protob_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{2}
}

func (x *Version) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Version) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

// A list name-strings and options for verification process via
// the Verify method..
type VerifOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of name-strings to verify.
	NameStrings []string `protobuf:"bytes,1,rep,name=name_strings,json=nameStrings,proto3" json:"name_strings,omitempty"`
	// Verification results will allways be returned for this data-sources,
	// if any.
	PreferredSources []int32 `protobuf:"varint,2,rep,packed,name=preferred_sources,json=preferredSources,proto3" json:"preferred_sources,omitempty"`
	// Return vernaculars in addition to matched scientific names for the best
	// result and preferred results.
	WithVernaculars bool `protobuf:"varint,3,opt,name=with_vernaculars,json=withVernaculars,proto3" json:"with_vernaculars,omitempty"`
}

func (x *VerifOpts) Reset() {
	*x = VerifOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifOpts) ProtoMessage() {}

func (x *VerifOpts) ProtoReflect() protoreflect.Message {
	mi := &file_protob_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifOpts.ProtoReflect.Descriptor instead.
func (*VerifOpts) Descriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{3}
}

func (x *VerifOpts) GetNameStrings() []string {
	if x != nil {
		return x.NameStrings
	}
	return nil
}

func (x *VerifOpts) GetPreferredSources() []int32 {
	if x != nil {
		return x.PreferredSources
	}
	return nil
}

func (x *VerifOpts) GetWithVernaculars() bool {
	if x != nil {
		return x.WithVernaculars
	}
	return false
}

// Result returned by Verify method.
type Verification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The best result according to GNames scoring.
	BestResult *ResultData `protobuf:"bytes,1,opt,name=best_result,json=bestResult,proto3" json:"best_result,omitempty"`
	// Result containing all existing matches from preverred data sources
	// provided by user.
	PreferredResults []*ResultData `protobuf:"bytes,2,rep,name=preferred_results,json=preferredResults,proto3" json:"preferred_results,omitempty"`
	// Number of data sources in GNames that matched the input name-string.
	DataSourcesNum int32 `protobuf:"varint,3,opt,name=data_sources_num,json=dataSourcesNum,proto3" json:"data_sources_num,omitempty"`
	// Provides data of reliability of matched data sources. If matches are
	// returned by at least one manually curated data source, one automatically
	// curated data source, or only by sources that are not significantly
	// manually curated.
	CurationLevel CurationLevel `protobuf:"varint,4,opt,name=curation_level,json=curationLevel,proto3,enum=protob.CurationLevel" json:"curation_level,omitempty"`
	// Returns error message, if any. If error is not empty, the match failed
	// because of a bug in the service.
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Verification) Reset() {
	*x = Verification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verification) ProtoMessage() {}

func (x *Verification) ProtoReflect() protoreflect.Message {
	mi := &file_protob_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verification.ProtoReflect.Descriptor instead.
func (*Verification) Descriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{4}
}

func (x *Verification) GetBestResult() *ResultData {
	if x != nil {
		return x.BestResult
	}
	return nil
}

func (x *Verification) GetPreferredResults() []*ResultData {
	if x != nil {
		return x.PreferredResults
	}
	return nil
}

func (x *Verification) GetDataSourcesNum() int32 {
	if x != nil {
		return x.DataSourcesNum
	}
	return 0
}

func (x *Verification) GetCurationLevel() CurationLevel {
	if x != nil {
		return x.CurationLevel
	}
	return CurationLevel_NOT_CURATED
}

func (x *Verification) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Returned data of the "best" or "preferred" result of name verification.
type ResultData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// We try our best to return ID that correspond to global_id of the
	// DataSource. If such ID is not provided, it will be auto-generated.
	// Auto-generated IDs will have 'GN-' prefix.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID that is exposed globally by the DataSource.
	GlobalId string `protobuf:"bytes,2,opt,name=global_id,json=globalId,proto3" json:"global_id,omitempty"`
	// The ID used by the DataSource internally.
	LocalId string `protobuf:"bytes,3,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	// Provides information which ID should be used for substituting a
	// placehoder in the URL template. After such substitution the URL can
	// be used to link the result to the data in the matched DataSource.
	UrlTemplateId UrlTemplateId `protobuf:"varint,4,opt,name=url_template_id,json=urlTemplateId,proto3,enum=protob.UrlTemplateId" json:"url_template_id,omitempty"`
	// ID of the matched DataSource itself.
	DataSourceId int32 `protobuf:"varint,5,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	// Shortened/abbreviated title of the data source.
	DataSourceTitleShort string `protobuf:"bytes,6,opt,name=data_source_title_short,json=dataSourceTitleShort,proto3" json:"data_source_title_short,omitempty"`
	// Name-string from the DataSource that was matched by GNames algorithm.
	MatchedName string `protobuf:"bytes,7,opt,name=matched_name,json=matchedName,proto3" json:"matched_name,omitempty"`
	// Cardinality of returned name: 0 - No match or hybrid formula,
	// 1 - Uninomial, 2 - Binomial, 3 - trinomial etc.
	MatchedCardinality int32 `protobuf:"varint,8,opt,name=matched_cardinality,json=matchedCardinality,proto3" json:"matched_cardinality,omitempty"`
	// Simplified canonicl form without ranks for names lower than species, and
	// with ommited hybrid signs for named hybrids. Quite often simple canonical
	// is the same as full canonical. Hybrid signs are preserved for hybrid
	// formulas.
	MatchedCanonicalSimple string `protobuf:"bytes,9,opt,name=matched_canonical_simple,json=matchedCanonicalSimple,proto3" json:"matched_canonical_simple,omitempty"`
	// Canonical form that preserves hybrid signs and infraspecific ranks.
	MatchedCanonicalFull string `protobuf:"bytes,10,opt,name=matched_canonical_full,json=matchedCanonicalFull,proto3" json:"matched_canonical_full,omitempty"`
	// Currently accepted name (only provided by DataSources with taxonomic
	// data).
	CurrentName string `protobuf:"bytes,11,opt,name=current_name,json=currentName,proto3" json:"current_name,omitempty"`
	// Cardinality of the accepted name. It might differ from matched name.
	CurrentCardinality int32 `protobuf:"varint,12,opt,name=current_cardinality,json=currentCardinality,proto3" json:"current_cardinality,omitempty"`
	// Simple version of canonical form for the currently accepted name.
	CurrentCanonicalSimple string `protobuf:"bytes,13,opt,name=current_canonical_simple,json=currentCanonicalSimple,proto3" json:"current_canonical_simple,omitempty"`
	// Full version of canonicall form for the currently accepted name.
	CurrentCanonicalFull string `protobuf:"bytes,14,opt,name=current_canonical_full,json=currentCanonicalFull,proto3" json:"current_canonical_full,omitempty"`
	// Is true if there is indication in the DataSource that the name is
	// not a currently accepted name for one or another reason.
	Synonym bool `protobuf:"varint,15,opt,name=synonym,proto3" json:"synonym,omitempty"`
	// Classification path to the name (if provided by the DataSource).
	// Classification path consists of a hierarchy of name-strings.
	ClassificationPath string `protobuf:"bytes,16,opt,name=classification_path,json=classificationPath,proto3" json:"classification_path,omitempty"`
	// Ranks of the classification path. They follow the same order as
	// the classification path.
	ClassificationRank string `protobuf:"bytes,17,opt,name=classification_rank,json=classificationRank,proto3" json:"classification_rank,omitempty"`
	// Classification IDs of the names-strings. They always correspond to
	// the "id" field.
	ClassificationIds string `protobuf:"bytes,18,opt,name=classification_ids,json=classificationIds,proto3" json:"classification_ids,omitempty"`
	// Levenshtein edit distance between canonical form of the input name-string
	// and the matched canonical form. If match type is "EXACT", edit-distance
	// will be 0.
	EditDistance int32 `protobuf:"varint,19,opt,name=edit_distance,json=editDistance,proto3" json:"edit_distance,omitempty"`
	// Levenshtein edit distance after removing suffixes from specific epithets
	// from canonical forms.
	StemEditDistance int32 `protobuf:"varint,20,opt,name=stem_edit_distance,json=stemEditDistance,proto3" json:"stem_edit_distance,omitempty"`
	// Type of the match. Take fuzzy matches with  a grain of salt.
	MatchType MatchType `protobuf:"varint,21,opt,name=match_type,json=matchType,proto3,enum=protob.MatchType" json:"match_type,omitempty"`
	// Vernacular names that correspond to the matched name. (Will be implemented
	// later)
	Vernaculars []*Vernacular `protobuf:"bytes,22,rep,name=vernaculars,proto3" json:"vernaculars,omitempty"`
}

func (x *ResultData) Reset() {
	*x = ResultData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultData) ProtoMessage() {}

func (x *ResultData) ProtoReflect() protoreflect.Message {
	mi := &file_protob_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultData.ProtoReflect.Descriptor instead.
func (*ResultData) Descriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{5}
}

func (x *ResultData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResultData) GetGlobalId() string {
	if x != nil {
		return x.GlobalId
	}
	return ""
}

func (x *ResultData) GetLocalId() string {
	if x != nil {
		return x.LocalId
	}
	return ""
}

func (x *ResultData) GetUrlTemplateId() UrlTemplateId {
	if x != nil {
		return x.UrlTemplateId
	}
	return UrlTemplateId_NONE
}

func (x *ResultData) GetDataSourceId() int32 {
	if x != nil {
		return x.DataSourceId
	}
	return 0
}

func (x *ResultData) GetDataSourceTitleShort() string {
	if x != nil {
		return x.DataSourceTitleShort
	}
	return ""
}

func (x *ResultData) GetMatchedName() string {
	if x != nil {
		return x.MatchedName
	}
	return ""
}

func (x *ResultData) GetMatchedCardinality() int32 {
	if x != nil {
		return x.MatchedCardinality
	}
	return 0
}

func (x *ResultData) GetMatchedCanonicalSimple() string {
	if x != nil {
		return x.MatchedCanonicalSimple
	}
	return ""
}

func (x *ResultData) GetMatchedCanonicalFull() string {
	if x != nil {
		return x.MatchedCanonicalFull
	}
	return ""
}

func (x *ResultData) GetCurrentName() string {
	if x != nil {
		return x.CurrentName
	}
	return ""
}

func (x *ResultData) GetCurrentCardinality() int32 {
	if x != nil {
		return x.CurrentCardinality
	}
	return 0
}

func (x *ResultData) GetCurrentCanonicalSimple() string {
	if x != nil {
		return x.CurrentCanonicalSimple
	}
	return ""
}

func (x *ResultData) GetCurrentCanonicalFull() string {
	if x != nil {
		return x.CurrentCanonicalFull
	}
	return ""
}

func (x *ResultData) GetSynonym() bool {
	if x != nil {
		return x.Synonym
	}
	return false
}

func (x *ResultData) GetClassificationPath() string {
	if x != nil {
		return x.ClassificationPath
	}
	return ""
}

func (x *ResultData) GetClassificationRank() string {
	if x != nil {
		return x.ClassificationRank
	}
	return ""
}

func (x *ResultData) GetClassificationIds() string {
	if x != nil {
		return x.ClassificationIds
	}
	return ""
}

func (x *ResultData) GetEditDistance() int32 {
	if x != nil {
		return x.EditDistance
	}
	return 0
}

func (x *ResultData) GetStemEditDistance() int32 {
	if x != nil {
		return x.StemEditDistance
	}
	return 0
}

func (x *ResultData) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_NO_MATCH
}

func (x *ResultData) GetVernaculars() []*Vernacular {
	if x != nil {
		return x.Vernaculars
	}
	return nil
}

// Vernacular name (will be implemented later)
type Vernacular struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vernacular name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Language of the name.
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	// Locality/localities where the name is used.
	Locality string `protobuf:"bytes,3,opt,name=locality,proto3" json:"locality,omitempty"`
}

func (x *Vernacular) Reset() {
	*x = Vernacular{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vernacular) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vernacular) ProtoMessage() {}

func (x *Vernacular) ProtoReflect() protoreflect.Message {
	mi := &file_protob_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vernacular.ProtoReflect.Descriptor instead.
func (*Vernacular) Descriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{6}
}

func (x *Vernacular) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vernacular) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Vernacular) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

// Options to send to GetDataSources method.
type DataSourcesOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// To return results only for this data_source_id. If not given return
	// results for all data_sources.
	DataSourceId int32 `protobuf:"varint,1,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	// Return all metadata about a data_source.
	Verbose bool `protobuf:"varint,2,opt,name=verbose,proto3" json:"verbose,omitempty"`
}

func (x *DataSourcesOpts) Reset() {
	*x = DataSourcesOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourcesOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourcesOpts) ProtoMessage() {}

func (x *DataSourcesOpts) ProtoReflect() protoreflect.Message {
	mi := &file_protob_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourcesOpts.ProtoReflect.Descriptor instead.
func (*DataSourcesOpts) Descriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{7}
}

func (x *DataSourcesOpts) GetDataSourceId() int32 {
	if x != nil {
		return x.DataSourceId
	}
	return 0
}

func (x *DataSourcesOpts) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

// Results received from DataSources method
type DataSources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSources []*DataSource `protobuf:"bytes,1,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
}

func (x *DataSources) Reset() {
	*x = DataSources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSources) ProtoMessage() {}

func (x *DataSources) ProtoReflect() protoreflect.Message {
	mi := &file_protob_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSources.ProtoReflect.Descriptor instead.
func (*DataSources) Descriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{8}
}

func (x *DataSources) GetDataSources() []*DataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

type DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The DataSource ID.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// A URL string with a placeholder for an ID component. This placeholder
	// can be replaced with a corresponding ID from name verification results
	// to get a working link to the name resource.
	UrlTemplate string `protobuf:"bytes,2,opt,name=url_template,json=urlTemplate,proto3" json:"url_template,omitempty"`
	// Shortened/abbreviated title of the DataSource.
	TitleShort string `protobuf:"bytes,3,opt,name=title_short,json=titleShort,proto3" json:"title_short,omitempty"`
	// Full title of the DataSource (verbatim option only).
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// Hompage of the DataSource (verbatim option only).
	UrlHome string `protobuf:"bytes,5,opt,name=url_home,json=urlHome,proto3" json:"url_home,omitempty"`
	// UUID associated with the DataSource at Global Names (verbatim option only).
	Uuid string `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Description of the DataSource.
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protob_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_protob_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_protob_proto_rawDescGZIP(), []int{9}
}

func (x *DataSource) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataSource) GetUrlTemplate() string {
	if x != nil {
		return x.UrlTemplate
	}
	return ""
}

func (x *DataSource) GetTitleShort() string {
	if x != nil {
		return x.TitleShort
	}
	return ""
}

func (x *DataSource) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DataSource) GetUrlHome() string {
	if x != nil {
		return x.UrlHome
	}
	return ""
}

func (x *DataSource) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DataSource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_protob_proto protoreflect.FileDescriptor

var file_protob_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x22, 0x06, 0x0a, 0x04, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x1c,
	0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x77, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x6e, 0x61, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73,
	0x22, 0x82, 0x02, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x75,
	0x6d, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x2e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xde, 0x07, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f,
	0x75, 0x72, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2e, 0x55,
	0x72, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x0d, 0x75, 0x72,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x18,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x38, 0x0a, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x75, 0x6c, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74,
	0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2e, 0x56,
	0x65, 0x72, 0x6e, 0x61, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x22, 0x58, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x6e, 0x61, 0x63,
	0x75, 0x6c, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0x51, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4f,
	0x70, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0a, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x72, 0x6c, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x72, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2a, 0x55, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x55, 0x5a,
	0x5a, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f,
	0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x5f, 0x46, 0x55, 0x5a, 0x5a, 0x59, 0x10, 0x04, 0x2a, 0x3f, 0x0a, 0x0d, 0x43, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x55, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x55, 0x54,
	0x4f, 0x5f, 0x43, 0x55, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x3e, 0x0a, 0x0d, 0x55,
	0x72, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x32, 0xd4, 0x01, 0x0a, 0x06,
	0x47, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x06, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x4f, 0x70, 0x74, 0x73, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x73, 0x1a, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protob_proto_rawDescOnce sync.Once
	file_protob_proto_rawDescData = file_protob_proto_rawDesc
)

func file_protob_proto_rawDescGZIP() []byte {
	file_protob_proto_rawDescOnce.Do(func() {
		file_protob_proto_rawDescData = protoimpl.X.CompressGZIP(file_protob_proto_rawDescData)
	})
	return file_protob_proto_rawDescData
}

var file_protob_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protob_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_protob_proto_goTypes = []interface{}{
	(MatchType)(0),          // 0: protob.MatchType
	(CurationLevel)(0),      // 1: protob.CurationLevel
	(UrlTemplateId)(0),      // 2: protob.UrlTemplateId
	(*Void)(nil),            // 3: protob.Void
	(*Pong)(nil),            // 4: protob.Pong
	(*Version)(nil),         // 5: protob.Version
	(*VerifOpts)(nil),       // 6: protob.VerifOpts
	(*Verification)(nil),    // 7: protob.Verification
	(*ResultData)(nil),      // 8: protob.ResultData
	(*Vernacular)(nil),      // 9: protob.Vernacular
	(*DataSourcesOpts)(nil), // 10: protob.DataSourcesOpts
	(*DataSources)(nil),     // 11: protob.DataSources
	(*DataSource)(nil),      // 12: protob.DataSource
}
var file_protob_proto_depIdxs = []int32{
	8,  // 0: protob.Verification.best_result:type_name -> protob.ResultData
	8,  // 1: protob.Verification.preferred_results:type_name -> protob.ResultData
	1,  // 2: protob.Verification.curation_level:type_name -> protob.CurationLevel
	2,  // 3: protob.ResultData.url_template_id:type_name -> protob.UrlTemplateId
	0,  // 4: protob.ResultData.match_type:type_name -> protob.MatchType
	9,  // 5: protob.ResultData.vernaculars:type_name -> protob.Vernacular
	12, // 6: protob.DataSources.data_sources:type_name -> protob.DataSource
	3,  // 7: protob.GNames.Ping:input_type -> protob.Void
	3,  // 8: protob.GNames.GetVersion:input_type -> protob.Void
	6,  // 9: protob.GNames.Verify:input_type -> protob.VerifOpts
	10, // 10: protob.GNames.GetDataSources:input_type -> protob.DataSourcesOpts
	4,  // 11: protob.GNames.Ping:output_type -> protob.Pong
	5,  // 12: protob.GNames.GetVersion:output_type -> protob.Version
	7,  // 13: protob.GNames.Verify:output_type -> protob.Verification
	11, // 14: protob.GNames.GetDataSources:output_type -> protob.DataSources
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_protob_proto_init() }
func file_protob_proto_init() {
	if File_protob_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protob_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vernacular); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourcesOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protob_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protob_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protob_proto_goTypes,
		DependencyIndexes: file_protob_proto_depIdxs,
		EnumInfos:         file_protob_proto_enumTypes,
		MessageInfos:      file_protob_proto_msgTypes,
	}.Build()
	File_protob_proto = out.File
	file_protob_proto_rawDesc = nil
	file_protob_proto_goTypes = nil
	file_protob_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GNamesClient is the client API for GNames service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GNamesClient interface {
	// Checks if the service is alive.
	Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Pong, error)
	// Returns Version of gnames project and the time it was built.
	GetVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Version, error)
	// Takes names-strings and options and returns verification result.
	Verify(ctx context.Context, in *VerifOpts, opts ...grpc.CallOption) (*Verification, error)
	// Takes data-source id and opts and returns the data-source metadata.
	// If no id is provided, it returns metadata for all data-sources.
	GetDataSources(ctx context.Context, in *DataSourcesOpts, opts ...grpc.CallOption) (*DataSources, error)
}

type gNamesClient struct {
	cc grpc.ClientConnInterface
}

func NewGNamesClient(cc grpc.ClientConnInterface) GNamesClient {
	return &gNamesClient{cc}
}

func (c *gNamesClient) Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/protob.GNames/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gNamesClient) GetVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/protob.GNames/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gNamesClient) Verify(ctx context.Context, in *VerifOpts, opts ...grpc.CallOption) (*Verification, error) {
	out := new(Verification)
	err := c.cc.Invoke(ctx, "/protob.GNames/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gNamesClient) GetDataSources(ctx context.Context, in *DataSourcesOpts, opts ...grpc.CallOption) (*DataSources, error) {
	out := new(DataSources)
	err := c.cc.Invoke(ctx, "/protob.GNames/GetDataSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GNamesServer is the server API for GNames service.
type GNamesServer interface {
	// Checks if the service is alive.
	Ping(context.Context, *Void) (*Pong, error)
	// Returns Version of gnames project and the time it was built.
	GetVersion(context.Context, *Void) (*Version, error)
	// Takes names-strings and options and returns verification result.
	Verify(context.Context, *VerifOpts) (*Verification, error)
	// Takes data-source id and opts and returns the data-source metadata.
	// If no id is provided, it returns metadata for all data-sources.
	GetDataSources(context.Context, *DataSourcesOpts) (*DataSources, error)
}

// UnimplementedGNamesServer can be embedded to have forward compatible implementations.
type UnimplementedGNamesServer struct {
}

func (*UnimplementedGNamesServer) Ping(context.Context, *Void) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedGNamesServer) GetVersion(context.Context, *Void) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedGNamesServer) Verify(context.Context, *VerifOpts) (*Verification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (*UnimplementedGNamesServer) GetDataSources(context.Context, *DataSourcesOpts) (*DataSources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSources not implemented")
}

func RegisterGNamesServer(s *grpc.Server, srv GNamesServer) {
	s.RegisterService(&_GNames_serviceDesc, srv)
}

func _GNames_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNamesServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protob.GNames/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNamesServer).Ping(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GNames_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNamesServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protob.GNames/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNamesServer).GetVersion(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GNames_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNamesServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protob.GNames/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNamesServer).Verify(ctx, req.(*VerifOpts))
	}
	return interceptor(ctx, in, info, handler)
}

func _GNames_GetDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourcesOpts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNamesServer).GetDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protob.GNames/GetDataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNamesServer).GetDataSources(ctx, req.(*DataSourcesOpts))
	}
	return interceptor(ctx, in, info, handler)
}

var _GNames_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protob.GNames",
	HandlerType: (*GNamesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GNames_Ping_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _GNames_GetVersion_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _GNames_Verify_Handler,
		},
		{
			MethodName: "GetDataSources",
			Handler:    _GNames_GetDataSources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protob.proto",
}
