syntax = "proto3";

package protob;
option go_package = "protob";

// An "empty" message for gRPC methods that do not need any reasonable input.
message Void {}

// Output for the Ping method, it returns "Pong" if connection to the service
// worked.
message Pong {
  // A simple value ("Pong" with all probability) to return if Ping method
  // succeded.
  string value = 1;
}

// Output for GetVersion method.
message Version {
  // Version of gnames project.
  string version = 1;
  // Timestamp of when gnames service was compiled.
  string build = 2;
}

// A list name-strings and options for verification process via
// the Verify method..
message VerifOpts {
  // A list of name-strings to verify.
  repeated string name_strings = 1;
  // Verification results will allways be returned for this data-sources,
  // if any.
  repeated int32 preferred_sources = 2;
  // Return vernaculars in addition to matched scientific names for the best
  // result and preferred results.
  bool with_vernaculars = 3;
}

// Result returned by Verify method.
message Verification {
  // The best result according to GNames scoring.
  ResultData  best_result = 1;
  // Result containing all existing matches from preverred data sources
  // provided by user.
  repeated ResultData preferred_results = 2;
  // Number of data sources in GNames that matched the input name-string.
  int32 data_sources_num = 3;
  // Provides data of reliability of matched data sources. If matches are
  // returned by at least one manually curated data source, one automatically
  // curated data source, or only by sources that are not significantly
  // manually curated.
  CurationLevel curation_level = 4;
  // Returns error message, if any. If error is not empty, the match failed
  // because of a bug in the service.
  string error = 5;
}

// Returned data of the "best" or "preferred" result of name verification.
message ResultData {
  // We try our best to return ID that correspond to global_id of the
  // DataSource. If such ID is not provided, it will be auto-generated.
  // Auto-generated IDs will have 'GN-' prefix.
  string id = 1;
  // The ID that is exposed globally by the DataSource.
  string global_id = 2;
  // The ID used by the DataSource internally.
  string local_id = 3;
  // Provides information which ID should be used for substituting a
  // placehoder in the URL template. After such substitution the URL can
  // be used to link the result to the data in the matched DataSource.
  UrlTemplateId url_template_id = 4;
  // ID of the matched DataSource itself.
  int32  data_source_id = 5;
  // Shortened/abbreviated title of the data source.
  string data_source_title_short = 6;
  // Name-string from the DataSource that was matched by GNames algorithm.
  string matched_name = 7;
  // Cardinality of returned name: 0 - No match or hybrid formula,
  // 1 - Uninomial, 2 - Binomial, 3 - trinomial etc.
  int32  matched_cardinality = 8;
  // Simplified canonicl form without ranks for names lower than species, and
  // with ommited hybrid signs for named hybrids. Quite often simple canonical
  // is the same as full canonical. Hybrid signs are preserved for hybrid
  // formulas.
  string matched_canonical_simple = 9;
  // Canonical form that preserves hybrid signs and infraspecific ranks.
  string matched_canonical_full = 10;
  // Currently accepted name (only provided by DataSources with taxonomic
  // data).
  string current_name = 11;
  // Cardinality of the accepted name. It might differ from matched name.
  int32  current_cardinality = 12;
  // Simple version of canonical form for the currently accepted name.
  string current_canonical_simple = 13;
  // Full version of canonicall form for the currently accepted name.
  string current_canonical_full = 14;
  // Is true if there is indication in the DataSource that the name is
  // not a currently accepted name for one or another reason.
  bool   synonym = 15;
  // Classification path to the name (if provided by the DataSource).
  // Classification path consists of a hierarchy of name-strings.
  string classification_path = 16;
  // Ranks of the classification path. They follow the same order as
  // the classification path.
  string classification_rank = 17;
  // Classification IDs of the names-strings. They always correspond to
  // the "id" field.
  string classification_ids = 18;
  // Levenshtein edit distance between canonical form of the input name-string
  // and the matched canonical form. If match type is "EXACT", edit-distance
  // will be 0.
  int32  edit_distance = 19;
  // Levenshtein edit distance after removing suffixes from specific epithets
  // from canonical forms.
  int32  stem_edit_distance = 20;
  // Type of the match. Take fuzzy matches with  a grain of salt.
  MatchType match_type = 21;
  // Vernacular names that correspond to the matched name. (Will be implemented
  // later)
  repeated Vernacular vernaculars = 22;
}

// Vernacular name (will be implemented later)
message Vernacular {
  // Vernacular name.
  string name = 1;
  // Language of the name.
  string language = 2;
  // Locality/localities where the name is used.
  string locality = 3;
}

// Match type between input name-string and the canonical form of a name-string
// in a DataSource.
enum MatchType {
  // No match, verification failed.
  NO_MATCH = 0;
  // EXACT means either canonical form, or the whole name-string matched
  // perfectlly.
  EXACT = 1;
  // The match was incomplete due to similarity of name-strings,
  // OCR or typing errors. Take these results with more suspition than
  // EXACT matches. Fuzzy match is never done on uninomials due to the
  // high rate of false positives.
  FUZZY = 2;
  // GNames failed to match full name string. Now the match happened by
  // removing either middle species epithets, or by choppping the 'tail' words
  // of the input name-string canonical form.
  PARTIAL_EXACT = 3;
  // Same as PARTIAL_EXACT, but also the match was not exact. We never do
  // fuzzy matches for uninomials, due to high rate of false positives.
  PARTIAL_FUZZY = 4;
}

// Tells if matched result was returned by at least one DataSource in the
// following categories.
enum CurationLevel {
  // All DataSources where the name-string was matched are not curated
  // sufficiently.
  NOT_CURATED = 0;
  // At least one DataSource is marked as sufficiently curated. It does not
  // mean that the particular match was manually checked though.
  CURATED = 1;
  // At least one of the returned DataSources invested significantly in
  // curating their data by scripts.
  AUTO_CURATED = 2;
}

// Explains which ID out of returned should be used for substitution in the
// placeholder of the URL template.
enum UrlTemplateId {
  // None of the IDs can be used for creating outlinks.
  NONE = 0;
  // Indicates that "id" is always good for creating outlinks.
  ID = 1;
  // "global_id" can always be used for creating outlinks.
  GLOBAL_ID = 2;
  // "local_id" can always be used for creating outlinks.
  LOCAL_ID = 3;
}

// Options to send to GetDataSources method.
message DataSourcesOpts {
  // To return results only for this data_source_id. If not given return
  // results for all data_sources.
  int32 data_source_id = 1;
  // Return all metadata about a data_source.
  bool verbose = 2;
}

// Results received from DataSources method
message DataSources {
  repeated DataSource data_sources = 1;
}

message DataSource {
  // The DataSource ID.
  int32 id = 1;
  // A URL string with a placeholder for an ID component. This placeholder
  // can be replaced with a corresponding ID from name verification results
  // to get a working link to the name resource.
  string url_template = 2;
  // Shortened/abbreviated title of the DataSource.
  string title_short = 3;
  // Full title of the DataSource (verbatim option only).
  string title = 4;
  // Hompage of the DataSource (verbatim option only).
  string url_home = 5;
  // UUID associated with the DataSource at Global Names (verbatim option only).
  string uuid = 6;
  // Description of the DataSource.
  string description = 7;
}

// An API methods for the name verification gRPC service.
service GNames {
  // Checks if the service is alive.
  rpc Ping(Void) returns(Pong) {}
  // Returns Version of gnames project and the time it was built.
  rpc GetVersion(Void) returns(Version) {}
  // Takes names-strings and options and returns verification result.
  rpc Verify(VerifOpts) returns(Verification) {}
  // Takes data-source id and opts and returns the data-source metadata.
  // If no id is provided, it returns metadata for all data-sources.
  rpc GetDataSources(DataSourcesOpts) returns(DataSources) {}
}
